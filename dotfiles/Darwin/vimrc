"git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'           " let Vundle manage Vundle, required
Plugin 'rust-lang/rust.vim'             " vim configuration for rust
Plugin 'enkron/ecs.vim'                 " self made color scheme..
Plugin 'vim-syntastic/syntastic'        " check syntax on each save
Plugin 'sheerun/vim-polyglot'           " a collection of language packs
" Plugin 'fatih/vim-go'                 " golang official plugin
" Plugin 'vim-scripts/indentpython.vim' " fixes autoindent behavior
" Plugin 'davidhalter/jedi-vim'         " understands most of Python's core features
" Plugin 'nvie/vim-flake8'              " PEP8 checking
" Plugin 'Valloric/YouCompleteMe'       " code completion engine
                                        " doesnt work on mac properly
call vundle#end()

""""""""""""""""""""""
"      Settings      "
""""""""""""""""""""""
set t_Co=256
colorscheme ecs

set term=${TERM}
syntax on                            " enable syntax highlighting

set omnifunc=syntaxcomplete#Complete
autocmd FileType python setlocal completeopt-=preview " disable the docstring
                                                      " window to popup
                                                      " during completion

" let python_highlight_all=1         " enable python syntax highlighting features

set nocompatible                     " Enables us Vim specific features
filetype off                         " Reset filetype detection first ...
filetype plugin indent on            " ... and enable filetype detection
set tabstop=4                        " set tabs to have 4 spaces
set shiftwidth=4                     " when using the >> or << commands,
                                     " shift lines by 4 spaces
set expandtab                        " expand tabs into spaces
set smarttab
set smartindent
set number                           " show line numbers
set relativenumber                   " each line in a file is numbered relative
                                     " to the cursor’s current position to show
                                     " the distance to that line
set showmatch                        " show the matching part
                                     " of the pair for [] {} and ()
set cursorline                       " show a visual line under the cursor's current line
set cursorlineopt=number,screenline  " settings for how 'cursorline' is displayed
set fileformat=unix                  " store the file in a Unix format
set textwidth=72                     " ensure your line length doesn’t
                                     " go beyond 72 characters
set encoding=utf-8                   " using utf-8 when working with python
set ruler                            " show the cursor position all the time
set history=50                       " keep 50 lines of command line history
set viminfo='20,\"50                 " read/write a .viminfo file, don't store more
                                     " than 50 lines of registers
set bs=indent,eol,start              " allow backspacing over everything in insert mode
set noswapfile                       " don't use swapfile
set nobackup                         " don't create backup files
set showcmd                          " show what i'm typing
set hlsearch                         " enable highlight searched patterns

set laststatus=2                     " show status line always
set statusline=%<%F%=\ [%1*%M%*%n%R%H]\ %-19(%3l.%02c%03V%)%-6(%p%%%)%O'%02b'

"""""""""""""""""""""
"      Plugins      "
"""""""""""""""""""""
" go.vim
" let g:go_fmt_command = "goimports"
" let g:go_autodetect_gopath = 1
" let g:go_list_type = "quickfix"
" 
" let g:go_highlight_types = 1
" let g:go_highlight_fields = 1
" let g:go_highlight_functions = 1
" let g:go_highlight_function_calls = 1
" let g:go_highlight_extra_types = 1
" let g:go_highlight_generate_tags = 1

" rust.vim
let g:rustfmt_autosave = 1
let g:rust_keep_autopairs_default = 1

" syntastic syntax checker
"let g:syntastic_python_checkers = ['flake8', 'pyflakes']

""""""""""""""""""""""
"      Mappings      "
""""""""""""""""""""""
" the more often i save, the more likely the data will not be lost
nnoremap <Space> :w!<CR>
cnoremap W<CR> :w!<CR>

" switch between buffers
nnoremap ,b :ls<CR>:buffer<Space>

" ugly change pattern
nnoremap ,c :%s/\< \>/ /g<Left><Left><Left><Left><Left><Left><Left>
" replace all occurences of the word where cursor is
nnoremap ,co :%s/\<<C-r>=expand('<cword>')<CR>\>/

" release search highlighting
nnoremap ,<space> :nohlsearch<CR>

" switch between bracets pairs (actual for mac keyboard)
nnoremap ~ %

" on/off trailing whitespaces visibility
nnoremap ,l :set list listchars=tab:>-,trail:∙,eol:¶<CR>
nnoremap ,nl :set nolist<CR>

" map Left to Ctrl+b in cmd mode to have behaviour like in terminal
cnoremap <C-b> <Left>
" map Right to Ctrl+f in cmd mode to have behaviour like in terminal
cnoremap <C-f> <Right>
" map Home to Ctrl+a in cmd mode to have behaviour like in terminal
cnoremap <C-a> <Home>

inoremap ( ()<Left>
inoremap [ []<Left>
inoremap { {}<Left>
inoremap " ""<Left>
" inoremap ' ''<Left>
" inoremap ` ``<Left>

" search mappings: these will make it so that going to the
" next one in a search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" when long lines inserted j k moves one physical line
" gj gk moves down one displayed line
noremap <Up> gk
noremap <Down> gj
noremap j gj
noremap k gk

" maybe later i'll figure out for what this mode is needed..
nnoremap Q <NOP>
" do not show q: window
nnoremap q: <NOP>

""""""""""""""""""""""
"   Rust Mappings    "
""""""""""""""""""""""
nnoremap ,rr :RustRun<CR>

""""""""""""""""""""""
"  Vundle Mappings   "
""""""""""""""""""""""
nnoremap ,vu :PluginUpdate<CR>
