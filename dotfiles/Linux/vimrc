"git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'                " let Vundle manage Vundle, required

Plugin 'rust-lang/rust.vim'                  " vim configuration for rust
Plugin 'ycm-core/YouCompleteMe'              " a code-completion engine for Vim
                                             " after ycm installation
                                             " navigate to install dir
                                             " and execute python3 install.py --all

Plugin 'prabirshrestha/async.vim'            " normalize async job control api
Plugin 'prabirshrestha/vim-lsp'              " async Language Server Protocol plugin for Vim8
Plugin 'prabirshrestha/asyncomplete.vim'     " async autocompletion for Vim 8
Plugin 'prabirshrestha/asyncomplete-lsp.vim' " provide LSP autocompletion source for
                                             " asyncomplete.vim and vim-lsp.

Plugin 'enkron/ecs_light.vim'                " self made color scheme..
Plugin 'vim-syntastic/syntastic'             " check syntax on each save
Plugin 'sheerun/vim-polyglot'                " a collection of language packs
                                             " doesnt work on mac properly

Plugin 'cespare/vim-toml'                    " toml syntax for Vim (>= 8)
call vundle#end()

""""""""""""""""""""""
"      Settings      "
""""""""""""""""""""""
set t_Co=256
colorscheme ecs_light

set term=${TERM}
syntax on                            " enable syntax highlighting

set omnifunc=syntaxcomplete#Complete

set nocompatible                     " Enables us Vim specific features
filetype off                         " Reset filetype detection first ...
filetype plugin indent on            " ... and enable filetype detection
set tabstop=4                        " set tabs to have 4 spaces
set shiftwidth=4                     " when using the >> or << commands,
                                     " shift lines by 4 spaces
set expandtab                        " expand tabs into spaces
set smarttab
set smartindent
set number                           " show line numbers
set relativenumber                   " each line in a file is numbered relative
                                     " to the cursor’s current position to show
                                     " the distance to that line
set showmatch                        " show the matching part
                                     " of the pair for [] {} and ()
set cursorline                       " show a visual line under the cursor's current line
set cursorlineopt=number,screenline  " settings for how 'cursorline' is displayed
set fileformat=unix                  " store the file in a Unix format
set textwidth=72                     " ensure your line length doesn’t
                                     " go beyond 72 characters
set encoding=utf-8                   " using utf-8 when working with python
set ruler                            " show the cursor position all the time
set history=50                       " keep 50 lines of command line history
set viminfo='20,\"50                 " read/write a .viminfo file, don't store more
                                     " than 50 lines of registers
set bs=indent,eol,start              " allow backspacing over everything in insert mode
set noswapfile                       " don't use swapfile
set nobackup                         " don't create backup files
set showcmd                          " show what i'm typing
set hlsearch                         " enable highlight searched patterns

set laststatus=2                     " show status line always
set statusline=%<%F%=\ [%1*%M%*%n%R%H]\ %-19(%3l.%02c%03V%)%-6(%p%%%)%O'%02b'

set hidden                           " turn on 'hidden' mode for buffers

"""""""""""""""""""""
"      Plugins      "
"""""""""""""""""""""

" rust.vim
let g:rustfmt_autosave = 1
let g:rust_keep_autopairs_default = 1

if executable('rust-analyzer')
  au User lsp_setup call lsp#register_server({
        \   'name': 'Rust Language Server',
        \   'cmd': {server_info->['rust-analyzer']},
        \   'whitelist': ['rust'],
        \   'initialization_options': {
        \     'cargo': {
        \       'loadOutDirsFromCheck': v:true,
        \     },
        \     'procMacro': {
        \       'enable': v:true,
        \     },
        \   },
        \ })
endif

" asm.vim
set filetype=nasm
let g:asmsyntax = 'nasm'

""""""""""""""""""""""
"      Mappings      "
""""""""""""""""""""""
" the more often save action occurs, the more likely the data won't be lost
nnoremap <Space> :w!<CR>
cnoremap W<CR> :w!<CR>

" switch between buffers
nnoremap ,b :ls<CR>:buffer<Space>

" ugly change pattern
nnoremap ,c :%s/\< \>/ /g<Left><Left><Left><Left><Left><Left><Left>
" replace all occurences of a word where a cursor is
nnoremap ,co :%s/\<<C-r>=expand('<cword>')<CR>\>//g<Left><Left>
" replace all occurences of a word on a current row only
nnoremap ,cl :.s/\<<C-r>=expand('<cword>')<CR>\>//g<Left><Left>
" count number of matches of a pattern
nnoremap ,gn :%s/\<<C-r>=expand('<cword>')<CR>\>//gn<CR>

" set paste
nnoremap ,sp :set paste<CR>

" release search highlighting
nnoremap ,<space> :nohlsearch<CR>

" switch between bracets pairs (actual for mac keyboard)
nnoremap ~ %

" on/off trailing whitespaces visibility
nnoremap ,l :set list listchars=tab:>-,trail:∙,eol:¶<CR>
nnoremap ,nl :set nolist<CR>

" obtain the highlighting information under the coursor
nnoremap ,hi :execute 'hi' synIDattr(synID(line("."), col("."), 1), "name")<CR>

" change behaviour of the `o` and `O` keys: by default these keys enters
" into the INSERT mode immediately after a call, below binding leaves it
" in COMMAND mode
map o o<ESC>
map <S-o> <S-o><ESC>

" map Left to Ctrl+b in cmd mode to have behaviour like in terminal
cnoremap <C-b> <Left>
" map Right to Ctrl+f in cmd mode to have behaviour like in terminal
cnoremap <C-f> <Right>
" map Home to Ctrl+a in cmd mode to have behaviour like in terminal
cnoremap <C-a> <Home>

" inoremap () ()<Left>
" inoremap [] []<Left>
inoremap {} {}<Left>
" inoremap "" ""<Left>
" inoremap ' ''<Left>
" inoremap ` ``<Left>

" search mappings: these will make it so that going to the
" next one in a search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" when long lines inserted j k moves one physical line
" gj gk moves down one displayed line
noremap <Up> gk
noremap <Down> gj
noremap j gj
noremap k gk

" maybe later i'll figure out for what this mode is needed..
nnoremap Q <NOP>
" do not show q: window
nnoremap q: <NOP>

""""""""""""""""""""""
"   Rust Mappings    "
""""""""""""""""""""""
nnoremap ,rr :RustRun<CR>

""""""""""""""""""""""
"  Vundle Mappings   "
""""""""""""""""""""""
nnoremap ,vu :PluginUpdate<CR>
