" Plugins ---------------------------------------------------------- {{{
"git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim' " let Vundle manage Vundle, required
Plugin 'rust-lang/rust.vim' " vim configuration for rust
Plugin 'jiangmiao/auto-pairs' " insert or delete brackets, parens, quotes in pair
Plugin 'enkron/ecs_light.vim' " my color scheme
Plugin 'enkron/ecs.vim' " my dark color scheme
Plugin 'sheerun/vim-polyglot' " collection of language packs
" if v:version >= 730
"     " display vertical lines at each indentation level for code indented
"     " with spaces
"     Plugin 'Yggdroot/indentLine'
" endif
if v:version >= 801
    Plugin 'dense-analysis/ale' " providing linting (syntax checking and semantic errors)
    " Plugin 'prabirshrestha/async.vim' " normalize async job control api
    " Plugin 'prabirshrestha/vim-lsp' " async Language Server Protocol
    " Plugin 'prabirshrestha/asyncomplete.vim' " async autocompletion
    " Plugin 'prabirshrestha/asyncomplete-lsp.vim' " LSP autocompletion source for asyncomplete.vim and vim-lsp.
    Plugin 'cespare/vim-toml' " toml syntax support
endif
if v:version >= 820
    " fast minimap (https://github.com/wfxr/code-minimap is required)
    Plugin 'wfxr/minimap.vim'
endif
Plugin 'tpope/vim-obsession.git' " reconstruct accustomed vim layout (:h mksession)
call vundle#end()
" }}}

" General settings ------------------------------------------------- {{{
if &term != "linux"
    set t_Co=256
    colorscheme ecs_light
endif

set term=${TERM}

syntax on                            " enable syntax highlighting
set nocompatible                     " enables to use Vim specific features
filetype off                         " reset filetype detection first ...
filetype plugin indent on            " ... and enable filetype detection
set tabstop=4                        " set tabs to have 4 spaces
set shiftwidth=4                     " when using the >> or << commands,
                                     " shift lines by 4 spaces
set expandtab                        " expand tabs into spaces
set smarttab
set smartindent
set number                           " show line numbers
set relativenumber                   " each line in a file is numbered relative
                                     " to the cursor’s current position to show
                                     " the distance to that line
set showmatch                        " show the matching part
                                     " of the pair for [] {} and ()
set cursorline                       " show a visual line under the cursor's current line

if v:version >= 801                  " `v: name` - variable predefined by Vim
    set cursorlineopt=number,screenline  " settings for how 'cursorline' is displayed
endif

set fileformat=unix                  " store the file in a Unix format
set textwidth=72                     " ensure your line length doesn’t
                                     " go beyond 72 characters
set encoding=utf-8                   " using utf-8 when working with python
set ruler                            " show the cursor position all the time
set history=50                       " keep 50 lines of command line history
set viminfo='20,\"50                 " read/write a .viminfo file, don't store more
                                     " than 50 lines of registers
set bs=indent,eol,start              " allow backspacing over everything in insert mode
set noswapfile                       " don't use swapfile
set nobackup                         " don't create backup files
set showcmd                          " show what i'm typing
set hlsearch                         " enable highlight searched patterns
set hidden                           " turn on 'hidden' mode for buffers
"set nowrap                          " do not wrap lines
                                     " allow long lines to extend as far as the line goes
set incsearch                        " while searching though a file incrementally
                                     " highlight matching characters as you type
" set ignorecase                     " ignore capital letters during search
" set smartcase                      " override the ignorecase option if searching for capital letters
                                     " this will allow to search specifically for capital letters
set showmode                         " show the mode you are on the last line.
set completeopt=menu,menuone,popup,noselect,noinsert " autocomplete with popup windows
" }}}

" Statusline ------------------------------------------------------- {{{
set laststatus=2                        " show the status on the second to last line
set statusline=                         " clear status line when vimrc is reloaded
set statusline+=%1*\%{&ff}%y\ %*
set statusline+=%2*\»\ %*
set statusline+=%3*\%n%m\%*
set statusline+=%1*\%=%t\ %*
set statusline+=%=
set statusline+=%1*\%4l/%*
set statusline+=%5*\%L%*
set statusline+=%2*\ «\ %*
set statusline+=%4*\ 0x%B\/%c\%*
" set statusline=%<%F%=\ [%1*%M%*%n%R%H]\ %-19(%3l.%02c%03V%)%-6(%p%%%)%O'%02b'
" }}}

" Vim scripts ------------------------------------------------------ {{{
" allow to fold long files to hide sections of text
" by default `marker` is mapped to '{{{ }}}' chars
" for example: " FOLDING SECTION --- {{{ a section code goes here }}}
" zo - opens a single fold under the cursor.
" zc - closes the fold under the cursor.
" zR - opens all folds.
" zM - closes all folds.
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END

" Override conceal level which could be set by some plugin
autocmd BufEnter * set conceallevel=0
" }}}

" Vim functions ---------------------------------------------------- {{{
" Below function allows to avoid entering the `INSERT` mode while splitting a
" long line (Vim doesn't have this type of method by default)
function! SplitLine()
    s/^\(\s*\)\(.\{-}\)\(\s*\)\(\%#\)\(\s*\)\(.*\)/\1\2\r\1\4\6
    call histdel("/", -1)
endfunction

function! ScrollPopup(nlines)
    let winids = popup_list()
    if len(winids) == 0
        return
    endif

    let prop = popup_getpos(winids[0])
    if prop.visible != 1
        return
    endif

    let firstline = prop.firstline + a:nlines
    let buf_lastline = str2nr(trim(win_execute(winids[0], "echo line('$')")))
    if firstline < 1
        let firstline = 1
    elseif prop.lastline + a:nlines > buf_lastline
        let firstline = buf_lastline + prop.firstline - prop.lastline
    endif

    call popup_setoptions(winids[0], {'firstline': firstline})
endfunction
" }}}

" Plugins settings ------------------------------------------------- {{{
" rust.vim
let g:rustfmt_autosave = 1
let g:rust_keep_autopairs_default = 0
let g:rust_fold = 1

"" register LSP language server.  Use :help lsp#register_server() for
"" more info
"if executable('rust-analyzer')
"" https://github.com/rust-lang/rust-analyzer
"  au User lsp_setup call lsp#register_server({
"        \   'name': 'Rust language server',
"        \   'cmd': {server_info->['rust-analyzer']},
"        \   'whitelist': ['rust'],
"        \   'initialization_options': {
"        \     'cargo': {
"        \       'buildScripts': {
"        \         'enable': v:true,
"        \       },
"        \     },
"        \     'procMacro': {
"        \       'enable': v:true,
"        \     },
"        \   },
"        \ })
"endif

" asm.vim
" set filetype=nasm
" let g:asmsyntax = 'nasm'

" ALE syntax checking and semantic errors
let g:ale_completion_enabled = 1
let g:ale_hover_to_floating_preview = 1
let g:ale_fix_on_save = 1
let g:ale_rust_cargo_use_clippy = executable('cargo-clippy')
let g:ale_linters = {
\   'rust': ['cargo', 'analyzer'],
\   'python': ['ruff', 'mypy'],
\}
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\}
" }}}

" Key mappings ----------------------------------------------------- {{{
" nnoremap – allows to map keys in normal mode
" inoremap – allows to map keys in insert mode
" vnoremap – allows to map keys in visual mode
let mapleader=' ' " by default mapleader variable is set to '\'

" the more often save action occurs, the more likely the data won't be
" lost
" nnoremap <Space> :w!<CR>
cnoremap W<CR> :w!<CR>

" switch between buffers
nnoremap <leader>b :ls<CR>:buffer<Space>
" switch between last buffers
nnoremap <leader>ll :b#<CR>

" ugly change pattern
nnoremap <leader>c :%s///g<Left><Left><Left>
" replace all occurences of a particular word under the cursor
nnoremap <leader>co :%s/\<<C-r>=expand('<cword>')<CR>\>//g<Left><Left>
" replace all occurences of a word on a current row only
nnoremap <leader>cl :.s/\<<C-r>=expand('<cword>')<CR>\>//g<Left><Left>
" count number of matches of a pattern
nnoremap <leader>gn :%s/\<<C-r>=expand('<cword>')<CR>\>//gn<CR>

" release search highlighting
nnoremap <leader><space> :nohlsearch<CR>

" switch between bracets pairs (actual for mac keyboard)
nnoremap ~ %

" on/off trailing whitespaces visibility
nnoremap <leader>l :set list listchars=tab:>-,trail:∙,eol:¶<CR>
nnoremap <leader>nl :set nolist<CR>

" obtain highlighting information under the coursor
nnoremap <leader>hi :execute 'hi' synIDattr(synID(line("."), col("."), 1), "name")<CR>

" change behaviour of the `o` and `O` keys: by default these keys enters
" into the INSERT mode immediately after a call, below binding leaves it
" in COMMAND mode
map o o<ESC>
map <S-o> <S-o><ESC>

" format all long lines in a file without affecting short lines
" tw (textwidth) option could be set for a new formatting option
" check existing tw -> :setl tw?
" reset current tw to defaults -> :setl tw&
nmap <leader>f :g/./ normal gqq<CR><ESC> :nohlsearch<CR>``

" most of the Linux terminals sends the escape by default when pressing
" alt/meta+normal_mode_key
imap <M-h> <ESC>

" map Left to Ctrl+b in cmd mode to have behaviour like in terminal
cnoremap <C-b> <Left>
" map Right to Ctrl+f in cmd mode to have behaviour like in terminal
cnoremap <C-f> <Right>
" map Home to Ctrl+a in cmd mode to have behaviour like in terminal
cnoremap <C-a> <Home>

" inoremap () ()<Left>
" inoremap [] []<Left>
" inoremap {} {}<Left>
" inoremap "" ""<Left>
" inoremap ' ''<Left>
" inoremap ` ``<Left>

" search mappings: these will make it so that going to the
" next one in a search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" when long lines inserted j k moves one physical line
" gj gk moves down one displayed line
noremap <Up> gk
noremap <Down> gj
noremap j gj
noremap k gk

" maybe later i'll figure out for what this mode is needed..
nnoremap Q <NOP>
" do not show q: window
" upd(24-Mar-22): understood at last: q: - shows the history of last
" commands, also 'q:' suffix works within gq+(line_num/G) command
" eg. `gq3<CR>` - formats next 3 lines according to the `tw` value
" nnoremap q: <NOP>

" Vundle mappings
nnoremap <leader>vu :PluginUpdate<CR>

" reload vim configuration file
" nnoremap <leader>rc :source<space>~/.vimrc<CR>

" split long lines in `NORMAL` mode
nnoremap <leader>sl :<C-u>call SplitLine()<CR>

" add a semi-colon to the end of a line,
" return the cursor to its original spot
inoremap ;; <C-o>mp<C-o>A;<C-o>`p

" add a `?` to the end of the line,
" return the cursor to its original spot.
" It's a useful feature when writing code in Rust
inoremap ?? <C-o>mp<C-o>A?<C-o>`p
inoremap }} <C-o>mp<C-o>A}<C-o>`p

" sync syntax highlighting (sometimes vim gets confused in a long file)
nnoremap <leader>ss :syntax sync fromstart<CR>

" popup window scrolling
nnoremap <buffer> <C-n> :call ScrollPopup(3)<CR>
nnoremap <buffer> <C-p> :call ScrollPopup(-3)<CR>

" Reload undo history
nmap <leader>ee :setl undoreload=0 \|edit<CR>

" Source ~/.vimrc
nmap <leader>rc :source $MYVIMRC<CR>:nohlsearch<CR>

" vim ale goto definition
nnoremap <leader>gt :ALEGoToDefinition<CR>
" vim ale hover window
nnoremap <leader>p :ALEHover<CR>

" open/close minimap (minimap plugin required)
nnoremap <leader>mo :Minimap<CR>
nnoremap <leader>mc :MinimapClose<CR>
" }}}
